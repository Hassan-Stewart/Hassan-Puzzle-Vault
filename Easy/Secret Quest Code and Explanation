# This is a code implementation of a two-sum problem.
# As mentioned in the explanation this is a quest to find the secret of the universe
# Behind a door lies the secret, but you must first unlock it

## Secret Quest Code
from typing import List
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        # Create a hashmap to store numbers and their indices
        numondoor = {}
        
        # Iterate through the list
        for i, num in enumerate(nums):
            # Calculate the complement
            bignum = target - num
            
            # Check if the bignum exists
            # If it doesn't exist return Accsess Granted
            if bignum in numondoor:
                return [numondoor[bignum], i]
            
            # Add the number and its index to the hashmap
            numondoor[num] = i
        
        # Return Access Denied if nothing is found
        return []

## Secret Quest explanation
#Time and Space Complexity:

The time and space complexity of the Two Sum problem is 𝑂(𝑛) or linear time complexity.

Time Complexity: 
The algorithm iterates through the list of numbers exactly once. Each lookup and insertion operation in the hashmap (or dictionary) is performed in constant time on average.
Thus, the total time complexity is 𝑂(𝑛), where 𝑛 is the number of elements in the list.

Space Complexity: The space complexity is also 𝑂(𝑛), because in the worst case the hashmap stores every element from the list along with its index. 
Therefore, the space required scales linearly with the size of the input list.

